Friday Jan 8, 2010



- ask about library use
- ask about UML diagram software

(Prof P) - Student S - (Regi* R)

View all courses = P S R
(Modify Courses = R)
(Modify Student Records = R)
Register/unregister for Courses = S R 				View students courses/ records = S R
View recommended courses (Term planning)


Course list:
+ primary key = course code (SOEN 341)
course name (software process)


Course Section List:
+ course code (SOEN 341)
+ Section (S)


+ Term (4)
+ Time-Start
+ Time-End
+ Professor

Prereq List: 

Fancott interface: Eri
Database Desgin/Data import team/Back end Team: Seb, Eri
System Administrator: MA
UI Team: Matt
Documentation Coordinator: Julia
UML Diagrams: CorE
Testing Coordinator: JB 


agh.ath.cx

Meeting Times: Wed 11:30  9th floor
	       Fri 11:30  9th floor

------------

Wednesday Jan 13, 2010

ï»¿- using ArgoUML for UML diagrams â€“ java based app
- requirements:
	- login, logout
	- view schedule
	- browse courses
	- create a list of suggested course options
	- view the sequence of courses to follow
	- next suggested courses
	- academic recordsx
- possible options:
	- choosing tec elec with combobox
- sequence planner
	- generate all possibilites
	- be able to select courses from sequence
- populate database on our own
- can use library

---------

Friday Jan 15, 2010


- Scope
- Modules & diagrams
- database diagrams : ERI
- entity-relationship model : SEB & MATT
- Archetecture diagram : how the modules are connected

- Authentication module: login/logout - CORE & ANDREAS
- Presentation module: renders the schedule - jquery, AJAX - shouldn't access database at all - scheduling passes data directly to presentation - MATT & JULIA
- Scheduling module: checks for conflicts/constraints - MySQL - ERI, MATT, JULIA
- Registration module: save function - ANDREAS
- Student record module: talk to db independently from presentation/scheduling - SEB
- Course module: list of all courses - JB
	- Sequence sub-module: list of connections between courses & when their offered
- Database module: give module general query and returns specific query - SEB

---------------

Wednesday Jan 20, 2010

- decided on three tier architecture

- Presentation module: 
	- caldenar
		- research 5 hours
		- implementation 20 hours
		- documentation 5 hours
	- style
		- 10 hours
	- tabs
		- each tab 25 hours
- Schedule module:
	- constraints
	- scheduler
	- suggest courses
	- (makes call to dependency validation)
	- 40 hours total
		- starts with large matrix, then remove
- Registration module:
	- temporary save
	- permenant save
	- (makes call to dependency validation)
	- 30 hours
- Course module:
	- sequence list (dependencies)
		- 40 hours
		- just retrieve main sequence
		- retrieve sequence based on record
	- view all courses
	- dependency validation
		- 40 hours
	- course description
- Student Record:
	- transcript module
		- student id, grades, courses, major, minor, age program, entry year, login name
		- 30 hours (a lot of database)
		- design: 15 hours
		- implentation: rest
- Authentication module:
	- 1 week for core
	- 20 hours
	- design/planning/readjusting: 6-8 hours
	- implentation/testing: rest
- Database construction:
	- 100 hours
	- populating database will be time consuming

Next Meetings topic:
- Goals & Constraints
- Scope
- Resource Evaluation

-----------------

Fri Jan 22, 2010

Tut Notes

- estimation graded on realistic aspect of estimation
- work breakdown structure (wbs): decomposition of each task of overall project
- use clear numbering system 
- 100% rule = everything to be included in the project must be included in the wbs
- this rule is recursive in that each level should be 100% represented of all the taks that make up that level
- should be planning schedule according to work to be done, not how it will be accomplished
- estimating available resources - be realistic - how much time can each member put into it
- limit the size of project - quality over quantity
- over-scoping will cost more than a limited program
- gantt chart is expected
- risk - ability to complete tasks & priority of tasks in relation to other tasks
- use case model 
	- system boundary contains everything system does
	- everyone that acts on the system is outside this boundary
	- can have inheritence in UCM diagram
- domain model	
	- start with noun analysis
	- domain level objects : concepts used to build system
		- 2 parts: name & varibales it needs
	- DLO associations contain a name (action - phrased as verb) and a connecting line between two DLOs
	- multiplicities should be included in DLO associations (how one DLO maps to another - one-to-many, many-to-one, one, many
- tracing requirements: use case numbers should correspond to all those artifacts produced in respect of the use case
	- SSDs, contracts, SDs


-----------------

Mon Jan 25, 2010

- Introduction - Julia
- Project Description - Andreas
- Goal & Constraints - Matt & Julia
- Resource Evaluation - Eri (4.1), MA (4.2)
- Scoping - JB
- Solution Sketch - MA (6.1), Eri (6.2)
- Plan - JB, Corey, Seb, Andreas

- First draft due Friday Jan 29
- Final drafts due Wed Feb 3 to Julia for proof-reading

- UML diagram
	- Sequence planar: connects to academic record & courses
	- Front-end portion

----------------

Fri Jan 29, 2010

- use cases: added open app & made browse course list public
- CORE: login, generate schedule
	- can be scoped out: history log, browse course list, sequence, 1st tier academic record
- plan: see table
- everything scoped in needs to be included in estimate

----------------

Wed Feb 3, 2010

- project description half done
- domain model needs to be done - JB
- constraints & qualities done
- use cases done
- use case diagram needs to be completed
- human resources - take a look and modify it if you want to
- technical resources & technologies in use located in Development_Environment_and_Resources.doc; missing ui languages/libraries
- scoping done
- architcture = software design doc
- activites & artifacts & project estimates & activites assignments = tables
- schedule = gantt chart

----------------

Fri Feb 19, 2010

Tut Notes

- 4+1 view
http://en.wikipedia.org/wiki/4%2B1_Architectural_View_Model
http://en.wikipedia.org/wiki/4%2B1_Architectural_View_Model
- don't need to write methods within package diagram
- connections expressed in component diagram different from package diagram
- don't model package diagrams as seen in wiki
- package includes name of package, class, association between class and package
- component lines should be dashed
- meet an interface has circle symbol
- deployment diagram: series of boxes, outmost box is physical system, middle boxes are logic, innermost boxes are interface
- dB server, OS, server it's running on, artifact (labeled with pic of doc)
- along line write the protocol it's communicating with
- activity diagram is like a flow chart
- start of activity: black circle - outside of box
- end of activity: black circle inside white circle - also outside of box, opposite end of start
- each step is listed in an ellipse
- make a decision - diamond
- split/join step - includes solid lines

Deliverable 2
-  2.2 - interface between the components expressed in 2.1
- component = logically separate piece of code
- 3.1 - class diagram
- 3.2 - describe each class
- 4 - not login, choose long ones, SSD, CO, SD

----------------

Fri Mar 5, 2010

Deliverable 2
- Class diagram - MA & Andreas
- Sequence Diagram - Seb
- Activity Diagram - Matt & Julia
- Component diagram - Corey
- Deployment diagram - JB

Begin coding this weekend.

----------------

Wed Mar 10, 2010

Deployment diagram:
- no php files in presentation layer
- apache contains php files
- js files under web browser

Final versions of diagrams due Friday midnight.

-----------------

Wednesday Mar 17th, 2010

Assigned stuff:
Eri+Corey: Modules that generate schedule and suggest courses. Course Browser + Sequence Viewer... 
Seb + Mathieu: Working DB Schema by tonight.
Corey: Populate DB.
Mathieu (+Julia): Front-end & tabs
JB+Andreas: Write stuff about testing. bout a page for each tab. (10 artifacts)
Andreas: Auth/user/create users PHPÉ View Schedule PHP. View academic record PHP. CORE PHP (with Seb).
Marc-AndrŽ: find upper bound of simultaneous connection & test for security .. (+ Andreas)