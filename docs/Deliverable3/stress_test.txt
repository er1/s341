
2.2.3 Stress Testing

The worst time of the year for a school registration system is obviously the period where registration has just been made available for a semester. Thousands of students are logged in at the same time to consult course information, register in their courses, or even drop them as they change their mind. We must also not forget that students often do not like their schedule and constantly check the availability of groups where the classes aren't on Friday night or on Monday morning, in case someone drops it and leaves an empty slot.

This kind of situation involves the following operations being stressed in particular: browsing courses, obtaining available classes for a course, registering in courses, generating possible schedules, etc. In other words, all functionalities of the system are being heavily demanded. To simulate such situations, we would set up a server in a controlled environment, in LAN with 4 other computers. Each computer would have gigabit network cards, and would be connected together with a good gigabit router. The goal here is to reduce network latency to almost nothing so that each computer simulating a heavy load of students won't be slown down while trying to flood the server with hundreds of thousands of queries.

The test will be performed using a perl script that simulates users using the system, through the use of libcurl (a library for various web operations that are normally done by a browser). The script be doing a complete set of operations effectively simulating all sorts of things that can be done with the web application. The same routine would be done over and over again, with information about the response time for each operation being stored for analysis of the system performance under stress conditions. Also, the queries faking user interaction won't always be the same (for instance, always querying for the same user) in order to avoid possible caching from the server that would enable it to react better than it would have had in a real life situation. Obviously, a single perl script ran on 4 computers would not suffice to take the system down, so the script would be forking the simulation routine somewhere about 10 000 times and running it concurrently on each test computer. Hopefully, that should generate enough stress on the server in order to get valuable results from the stress test.


